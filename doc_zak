Principe d'une connection client / serveur 

Les fonctions cités sont disponibles dans les bibliothèques systemes types.h et socket.h ,pour les inclures , on fait donc un include : 
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

Toutes ces infos sont disponibles en faisant un simple man : 
Exemple : man socket donne le synopsis , la description , les flags et des exemples d'utilisation de la fonction socket. 

Coté serveur : 
- socket	: Création d'une socket qui permettra la connection client/serveur
- bind		: Lie le socket à une addresse ip et à un port
- listen 	: Demande au noyau d'écouter sur le port assigné
- accept 	: Accepte une connection entrante (bloquant)

Coté client : 
- socket 	: Création d'une socket qui permettra la connection client/serveur
- connect	: Demande d'établissement d'une connection (bloquant)
Astuce : connect n'établie de connection que sur une addresse ip , si l'on a qu'un nom de demaine , on utilise getaddrinfo pour rechercher l'ip correspondante


À partir de ce moment, la connection client / serveur est active, les echanges se font par des entrées-sorties FIFO 

Si le serveur write , le client read 
Si le client read , le serveur write

Les fonctions recv et send permettent également l'échange mais aussi d'avoir plus de contrôle sur ces echanges grâce à des flags optionnels 





À la fin de l'échange , toute connection ayant été ouverte doit être fermée par la suite --> Fonction close 



Les fonctions et leur utilisations 

int socket(int domain , int type , int protocol) --> Retourne un descripteur de fichier ou -1 si echec
domain --> famille de protocole		 : Pour une addresse IPV4 , on utilise AF_INET
type   --> sémantique de communication 	 : Pour une communication TCP , on utilise SOCK_STREAM 
protocol--> type de protocol 		 : Pour les sockets ayant plusieurs types de protocoles , n'est pas utile ici et peut être mis à 0. Je vais pas m'étendre la dessus
Pour plus d'infos , man socket et man protocols(5)


int bind(int sockfd, const struct sockaddr* addr, socklen_t addrlen) --> retourne 0 si succès , -1 si echec 
sockfd --> descripteur de fichier du socket 		: On mettra le fd renvoyée par la fonction socket
addr   --> structure ayant l'ip et le port d'écoute 	: Il faudra au préalable créer cette variable addr
Pour créer cette variable addr on fera : 
struct sockaddr addr ; 
addr.sin_t adrIP = 0XC0A81414 ;        Attention , toujours en haxa , l'addresse ecrite correspond à  192.168.20.20 
addr.sin_family  = AF_INET    ;        Pour IPV4 
addr.sin_port  = htons( 3741) ;        host to network ou ntohs pour un network to host short 
addr.sin_addr.s_addr = htonl (adrIP) ; Addresse ip en host to network long ou ntohl pour un network to host long
addr.sin_addr.s_addr = INADDR_ANY ;    Sur toutes les interfaces locales , correspond à l'addresse du socket 
addrlen --> longueur de la structure pointée par addr 	: sizeof( addr) 


int listen(int sockfd, int backlog) --> Retourne 0 si succès , -1 si erreur 
sockfd --> descripteur de fichier renvoyé par socket 
backlog --> Nombre max de connections en attente , une fois dépassé le client a un rejet

int accept(int sockfd , struct sockaddr *addr, socklen_t *addrlen) --> Retourne un descripteur de fichier ou -1 si erreur
sockfd --> descripteur de fichier renvoyé par socket APRES ECOUTE 
addr   --> addresse ip et port du client connecté 
addrlen --> taille structure addr 					Comme dhab un sizeof 

int connect(int sockfd , struct sockaddr *addr, socklen_t *addrlen) --> Retourne 0 si succès ou -1 si erreur 
sockfd --> descripteur de fichier renvoyé par socket
addr   --> addresse ip et port sur lequel on se connecte 
addrlen --> taille structure addr 


recv et send à voir plus tard 

